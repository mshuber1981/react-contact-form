{"version":3,"sources":["assets/components/Processing.js","assets/containers/ContactForm.js","App.js","index.js"],"names":["Processing","Spinner","animation","variant","size","role","className","Contact","button","apiUrl","useState","validated","setValidated","processing","setProcessing","showSuccess","setShowSuccess","showError","setShowError","postFormData","data","a","fetch","method","body","JSON","stringify","headers","Accept","response","ok","message","status","Error","type","id","Form","noValidate","onSubmit","event","form","currentTarget","checkValidity","preventDefault","stopPropagation","name","target","elements","nameData","value","email","emailData","messageData","persist","then","reset","catch","error","console","log","Row","Group","as","Col","md","controlId","Label","Control","required","placeholder","Feedback","pattern","Alert","show","onClose","dismissible","Heading","App","ContactForm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df33309b.chunk.js","sourcesContent":["// https://react-bootstrap.github.io/components/spinners/\nimport {Spinner} from \"react-bootstrap\";\n\nconst Processing = () => {\n    return (\n        <Spinner animation=\"border\" variant=\"success\" size=\"sm\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n        </Spinner>\n    )\n}\n\nexport default Processing;","import React, { useState } from \"react\";\n// https://react-bootstrap.github.io/components/forms/\nimport { Col, Form, Alert } from \"react-bootstrap\";\nimport Processing from \"../components/Processing\"\n\nconst Contact = ({apiUrl}) => {\n  // Set initial states for the form\n  const [validated, setValidated] = useState(false);\n  const [processing, setProcessing] = useState(false);\n  const [showSuccess, setShowSuccess] = useState(false);\n  const [showError, setShowError] = useState(false);\n\n  const postFormData = async (data) => {\n    const response = await fetch(\n      `${apiUrl}`,\n      {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n\n    if (!response.ok) {\n      const message = `An error has occured: ${response.status}`;\n      throw new Error(message);\n    }\n\n    return response;\n  };\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    // Check to see if the form has been validated\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n    \n    const name = event.target.elements.nameData.value;\n    const email = event.target.elements.emailData.value;\n    const message = event.target.elements.messageData.value;\n    const data = {\n      name: name,\n      email: email,\n      message: message,\n    };\n\n    if (form.checkValidity()) {\n      event.preventDefault();\n      event.persist();\n      setProcessing(true);\n      postFormData(data)\n        .then(() => {\n          // Reset processing (spinner)\n          setProcessing(false);\n          // Reset validation\n          setValidated(false);\n          // Reset the form inputs\n          event.target.reset();\n          // Success alert\n          setShowSuccess(true);\n        })\n        .catch((error) => {\n          console.log(error.message);\n          setProcessing(false);\n          setValidated(false);\n          event.target.reset();\n          // Error alert\n          setShowError(true);\n        });\n    }\n  };\n\n  let button;\n\n  if (processing) {\n    button = <button type=\"submit\" className=\"mt-3 btn btn-secondary btn-lg\">Submit <Processing /></button>\n  } else {\n    button = <button type=\"submit\" className=\"mt-3 btn btn-secondary btn-lg\">Submit</button>\n  }\n\n  return (\n    <section\n      id=\"contact\"\n      className=\"d-flex flex-column min-vh-100 justify-content-center\"\n    >\n      <div className=\"container text-center\">\n        <h2>Contact</h2>\n        <hr />\n        <Form noValidate validated={validated} onSubmit={handleSubmit}>\n          {/* Name */}\n          <Form.Row className=\"justify-content-center mt-3\">\n            <Form.Group as={Col} md=\"9\" controlId=\"nameData\">\n              <Form.Label>Name</Form.Label>\n              <Form.Control required type=\"text\" placeholder=\"Name\" />\n              <Form.Control.Feedback type=\"invalid\">\n                <h5>Name must be at least one character.</h5>\n              </Form.Control.Feedback>\n            </Form.Group>\n          </Form.Row>\n\n          {/* Email */}\n          <Form.Row className=\"justify-content-center\">\n            <Form.Group as={Col} md=\"9\" controlId=\"emailData\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control\n                required\n                pattern=\"^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$\"\n                placeholder=\"someone@example.com\"\n              />\n              <Form.Control.Feedback type=\"invalid\">\n                <h5>Please enter a valid email.</h5>\n              </Form.Control.Feedback>\n            </Form.Group>\n          </Form.Row>\n\n          {/* Message */}\n          <Form.Row className=\"justify-content-center\">\n            <Form.Group as={Col} md=\"9\" controlId=\"messageData\">\n              <Form.Label>Message</Form.Label>\n              <Form.Control required as=\"textarea\" />\n              <Form.Control.Feedback type=\"invalid\">\n                <h5>Please provide a valid message.</h5>\n              </Form.Control.Feedback>\n            </Form.Group>\n          </Form.Row>\n\n          {/* Submit Button */}\n          <Form.Row className=\"justify-content-center pb-5\">\n            {button}\n          </Form.Row>\n\n          {/* Success alert */}\n          <Form.Row className=\"justify-content-center\">\n            <Alert\n              show={showSuccess}\n              variant=\"success\"\n              onClose={() => setShowSuccess(false)}\n              dismissible\n            >\n              <Alert.Heading>Success! I will contact you soon.</Alert.Heading>\n            </Alert>\n\n            {/* Error alert */}\n            <Alert\n              show={showError}\n              variant=\"danger\"\n              onClose={() => setShowError(false)}\n              dismissible\n            >\n              <Alert.Heading>\n                Sorry, something went wrong. Please try again later.\n              </Alert.Heading>\n            </Alert>\n          </Form.Row>\n        </Form>\n      </div>\n    </section>\n  );\n};\n\nexport default Contact;\n","import ContactForm from \"./assets/containers/ContactForm\";\n\n// API Gateway Contact Form endpoint\nconst apiUrl = \"https://52y9yw1bo2.execute-api.us-east-2.amazonaws.com/Prod/contactform\";\n\nconst App = () => {\n  return (\n    <main>\n      <ContactForm apiUrl={apiUrl} />\n    </main>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}